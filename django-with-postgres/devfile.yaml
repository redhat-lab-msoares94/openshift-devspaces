schemaVersion: 2.2.0
metadata:
  name: django-postgres
  version: 1.0.0
  description: Devfile for Django server with PostgreSQL on OpenShift DevSpaces
projects:
  - name: django-postgres-devspaces
    git:
      remotes:
        origin: "https://github.com/LeandroJan/django-postgres-devspaces.git"
      checkoutFrom:
        remote: "origin"
        revision: "main"
components:
  - name: python
    container:
      image: registry.redhat.io/devspaces/udi-rhel8@sha256:9199796c9dd82a16ebb2c4ff8d06b9727f392eb93eb7ffa2974ad6c16e3d8e5d
      volumeMounts:
        - name: venv
          path: /home/user/.venv
      memoryLimit: 2Gi
      memoryRequest: 1Gi
      cpuLimit: '2'
      cpuRequest: '1'
      mountSources: true
      endpoints:
        - name: django
          targetPort: 8000
          exposure: public
      env:
        - name: POSTGRESQL_DATABASE
          value: "db"
        - name: POSTGRESQL_USER
          value: "redhat"
        - name: POSTGRESQL_PASSWORD
          value: "Redhat@123"
        - name: POSTGRESQL_HOST
          value: "localhost"
        - name: POSTGRESQL_PORT
          value: "5432"
  - name: postgres
    container:
      image: quay.io/centos7/postgresql-13-centos7:69623db6c74ac2437a2f11c0733e38c4b8dbb6b1
      env:
        - name: POSTGRESQL_DATABASE
          value: "db"
        - name: POSTGRESQL_USER
          value: "redhat"
        - name: POSTGRESQL_PASSWORD
          value: "Redhat@123"
      endpoints:
        - name: postgres
          targetPort: 5432
          exposure: none
      mountSources: false
  - name: dbeaver
    container:
      image: dbeaver/cloudbeaver:latest
      memoryLimit: 512Mi
      endpoints:
        - name: cloudbeaver
          targetPort: 8978
          exposure: public

  # - name: pgadmin4
  #   container:
  #     image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4:latest
  #     env:
  #       - name: PGADMIN_DEFAULT_EMAIL
  #         value: "admin@example.com"   # Default email for pgAdmin login
  #       - name: PGADMIN_DEFAULT_PASSWORD
  #         value: "admin"               # Default password for pgAdmin login
  #       - name: PGADMIN_LISTEN_PORT
  #         value: "8080"                # Port pgAdmin listens on (non-root port)
  #     endpoints:
  #       - name: pgadmin
  #         targetPort: 8080              # Expose pgAdmin on port 8080
  #         exposure: public              # Make it accessible publicly   
  - name: venv
    volume:
      size: 2G

commands:
  - id: create-venv
    exec:
      component: python
      commandLine: "python -m venv .venv"
      workingDir: ${PROJECT_SOURCE}

  - id: install-dependencies
    exec:
      component: python
      commandLine: "sh .venv/bin/activate && pip install -r requirements.txt"
      workingDir: ${PROJECT_SOURCE}

  - id: wait-for-db
    exec:
      component: python
      commandLine: |
        python wait_db.py && \
        sh .venv/bin/activate && \
        python manage.py migrate && \
        echo "from django.contrib.auth import get_user_model; \
        User = get_user_model(); \
        User.objects.filter(username='admin').exists() or \
        User.objects.create_superuser('admin', 'admin@example.com', '12345678')" | python manage.py shell
      workingDir: ${PROJECT_SOURCE}

  - id: create-superuser
    exec:
      component: python
      commandLine: |
        echo "from django.contrib.auth import get_user_model; \
        User = get_user_model(); \
        User.objects.filter(username='admin').exists() or \
        User.objects.create_superuser('admin', 'admin@example.com', '12345678')" | python manage.py shell
      workingDir: ${PROJECT_SOURCE}

  - id: run-migrations
    exec:
      component: python
      commandLine: "sh .venv/bin/activate && python manage.py migrate"
      workingDir: ${PROJECT_SOURCE}

  - id: setup-environment
    composite:
      commands:
        - run-migrations
        - create-superuser
      parallel: false        

  - id: run-django
    exec:
      component: python
      commandLine: "sh .venv/bin/activate && python manage.py runserver 0.0.0.0:8000"
      workingDir: ${PROJECT_SOURCE}
      group:
        kind: run
        isDefault: true  

events:
  postStart:
    - create-venv
    - install-dependencies
    # - wait-for-db
    # - run-migrations
    # - create-superuser
    # - run-django